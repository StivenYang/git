//初始化仓库的用户信息，——global选项是用来偷懒的，以后新建仓库就不需要重新制定了
git config --global user.name "StivenYang"
git config --global user.email "StivenYang626@gmail.com"

//初始化当前目录作为repod
git init

//向本地仓库提交更改
git commit -m "xxx"

//查看当前是否有更改需要commit
git status

//查看FILE是否被更改，更改的哪几行
git diff FILE

//git的版本控制，各种吃后悔药，哈哈
git reset --hard CommitId
git reglog
git checkout -- FILE   //又是一个后悔药：撤销工作区制定文件做过的修改, -- 可是很重要的，不要忘记写了，不然就成了切换分支了哦:-)
git reset HEAD FILE   //强力后悔药：可以把已经提交到暂存区的修改给撤销，舒服吧？

//git的工作区，暂存区，和仓库repod的理解


//添加远程仓库，很兴奋，有木有，有木有？
ssh-keygen -t rsa -C "StivenYang626@gmail.com"
//生成秘钥以后，需要把公钥添加到咱们的github setting或者码云 setting的ssh项里面，目的是让你可以为所欲为的修改远程仓库，哈哈，以后修改可是要小心了（有后悔药可以吃，不怕不怕啦）

//把本地的仓库和远程的仓库进行关联，方便在不同的机器上面进行开发这个项目
git remote add origin git@github.com:StivenYang/git.git

git push -u origin master //-u参数是在第一次，也就是远程repo为空的时候使用的，目的是同步master分支，在以后的push和pull时可以简化命令

//克隆远程的仓库到本地
git clone git@github.com:StivenYang/git.git


///////////////////////////////////
//下面是分支branch的概念和命令
///////////////////////////////////
//创建分支并切换到该分支
git checkout -b dev	//可以分解为git branch dev 和 git checkout dev 两个命令

//查看分支
git branch

//切换到主分支
git checkout master

//合并分支
git merge dev

//删除分支
git branch -d dev

//查看分支合并图
git log --graph

////////////////////////////////////
//下面是分支冲突
////////////////////////////////////
情景1：你创建了一个分支，修改了这个分支以后，切换到了主分支；然后你没有合并分支，又在master分支上做了修改；修改完之后开始合并分支；这时候，次分支和主分支就会发生冲突，这时候应该怎么办?
我的答案：首先手动解决冲突，然后再合并分支。比方说有一句话：hello world，主分支加了一个？，次分支加了一个！，并且都提交了，这时候合并分支的时候就会发生上述的错误，发生错误以后，这句话就会变成下面这样：
<<<<<<< HEAD
hello world?
=======
hello world!
>>>>>>> dev
也就是这个文件会把两次修改的都列出来让你选择，你需要删除某些你不用的，然后再次进行提交就行了，很方便，有木有？最后别忘了删除不用的分支哦。

